{"ast":null,"code":"import React,{useState}from'react';import DatePicker from'react-datepicker';import'react-datepicker/dist/react-datepicker.css';import InputItem from'./inputitems';import'./experience.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Step2=_ref=>{let{userObject,handleExperienceChange,handleDescriptionChange,addExperience,addDescription,removeDescription,removeExperience}=_ref;const[suggestions,setSuggestions]=useState({});const[showSuggestions,setShowSuggestions]=useState({});// Fetch AI suggestions based on job title\nconst getSuggestions=async(title,index)=>{if(!title)return;try{const response=await fetch('/api/generate-description',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({title})// Send the job title to the backend\n});if(response.ok){const data=await response.json();// Assuming data.suggestions[0] contains all descriptions as a single string\nconst splitSuggestions=data.suggestions[0].split(/(\\d\\.\\s)/)// Split on numbers like \"1. \", \"2. \", \"3. \"\n.filter(text=>text.trim()&&!/^\\d\\.\\s/.test(text));// Remove empty elements and numbers\nconst newSuggestions={...suggestions,[index]:splitSuggestions};setSuggestions(newSuggestions);// Show suggestions for the relevant experience index\nconst updatedShowSuggestions={...showSuggestions,[index]:true};setShowSuggestions(updatedShowSuggestions);}else{console.error('Error fetching suggestions');}}catch(error){console.error('Error:',error);}};// Update string for start and end dates\nconst updateDatesString=exp=>{const startDate=exp.startDate?new Date(exp.startDate).toLocaleDateString('en-US',{year:'numeric',month:'short'}):'';const endDate=exp.currentlyWorking?'Present':exp.endDate?new Date(exp.endDate).toLocaleDateString('en-US',{year:'numeric',month:'short'}):'';return startDate&&endDate?\"\".concat(startDate,\" - \").concat(endDate):startDate;};return/*#__PURE__*/_jsxs(\"div\",{className:\"step\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Work Experience\"}),userObject.experience.map((exp,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"experience-input-group\",children:[/*#__PURE__*/_jsx(InputItem,{className:\"title\",onChange:e=>{handleExperienceChange(index,'title',e.target.value);getSuggestions(e.target.value,index);// Fetch suggestions on title change\n},label:\"Title\",placeholder:\"Enter your job title\",name:\"title-\".concat(index),value:exp.title||''}),/*#__PURE__*/_jsx(InputItem,{className:\"company\",onChange:e=>handleExperienceChange(index,'company',e.target.value),label:\"Company\",placeholder:\"Enter company name\",name:\"company-\".concat(index),value:exp.company}),/*#__PURE__*/_jsx(\"div\",{className:\"experience-date\",children:/*#__PURE__*/_jsx(DatePicker,{selected:exp.startDate,onChange:date=>handleExperienceChange(index,'startDate',date),dateFormat:\"MM/yyyy\",showMonthYearPicker:true,placeholderText:\"Select start date\",name:\"startDate-\".concat(index)})}),/*#__PURE__*/_jsx(\"div\",{className:\"experience-date\",children:/*#__PURE__*/_jsx(DatePicker,{selected:exp.endDate,onChange:date=>handleExperienceChange(index,'endDate',date),dateFormat:\"MM/yyyy\",showMonthYearPicker:true,placeholderText:\"Select end date\",name:\"endDate-\".concat(index),disabled:exp.currentlyWorking})}),/*#__PURE__*/_jsxs(\"div\",{className:\"currently-working\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:exp.currentlyWorking,onChange:e=>handleExperienceChange(index,'currentlyWorking',e.target.checked),id:\"currentlyWorking-\".concat(index)}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"currentlyWorking-\".concat(index),style:{display:'inline-block',marginLeft:'8px'},children:\"Currently Working\"})]}),/*#__PURE__*/_jsx(InputItem,{className:\"location\",onChange:e=>handleExperienceChange(index,'location',e.target.value),label:\"Location\",placeholder:\"Enter location\",name:\"location-\".concat(index),value:exp.location}),exp.description.map((desc,descIndex)=>/*#__PURE__*/_jsxs(\"div\",{className:\"description-item\",children:[/*#__PURE__*/_jsx(InputItem,{className:\"description\",onChange:e=>handleDescriptionChange(index,descIndex,e.target.value),label:\"Description \".concat(descIndex+1),placeholder:\"Enter job description\",name:\"description-\".concat(index,\"-\").concat(descIndex),value:desc}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"rbutton\",onClick:()=>removeDescription(index,descIndex),children:\"Remove Description\"})]},descIndex)),showSuggestions[index]?/*#__PURE__*/_jsxs(\"div\",{className:\"suggestions-box\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"close-button\",onClick:()=>setShowSuggestions({...showSuggestions,[index]:false}),children:\"X\"}),/*#__PURE__*/_jsx(\"h4\",{children:\"Suggested Descriptions:\"}),suggestions[index].map((suggestion,i)=>/*#__PURE__*/_jsx(\"p\",{children:suggestion.trim()},i)),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:()=>getSuggestions(exp.title,index),children:\"Refresh Suggestions\"})]}):/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:()=>setShowSuggestions({...showSuggestions,[index]:true}),children:\"Show Suggestions\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"button-group\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"add-description\",onClick:()=>addDescription(index),children:\"Add Description\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"rbutton\",onClick:()=>removeExperience(index),children:\"Remove Experience\"}),/*#__PURE__*/_jsxs(\"h3\",{children:[exp.company,\" \",/*#__PURE__*/_jsx(\"span\",{children:updateDatesString(exp)})]})]})]},index)),/*#__PURE__*/_jsx(\"div\",{className:\"nav-buttons\",children:/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"add-experience\",onClick:addExperience,children:\"Add Experience\"})})]});};export default Step2;","map":{"version":3,"names":["React","useState","DatePicker","InputItem","jsx","_jsx","jsxs","_jsxs","Step2","_ref","userObject","handleExperienceChange","handleDescriptionChange","addExperience","addDescription","removeDescription","removeExperience","suggestions","setSuggestions","showSuggestions","setShowSuggestions","getSuggestions","title","index","response","fetch","method","headers","body","JSON","stringify","ok","data","json","splitSuggestions","split","filter","text","trim","test","newSuggestions","updatedShowSuggestions","console","error","updateDatesString","exp","startDate","Date","toLocaleDateString","year","month","endDate","currentlyWorking","concat","className","children","experience","map","onChange","e","target","value","label","placeholder","name","company","selected","date","dateFormat","showMonthYearPicker","placeholderText","disabled","type","checked","id","htmlFor","style","display","marginLeft","location","description","desc","descIndex","onClick","suggestion","i"],"sources":["/Users/annierome/Documents/GitHub/ResuBuild/resubuild/resume-builder/src/components/Experience.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport InputItem from './inputitems';\nimport './experience.css';\n\nconst Step2 = ({ \n    userObject, \n    handleExperienceChange, \n    handleDescriptionChange, \n    addExperience, \n    addDescription, \n    removeDescription, \n    removeExperience \n}) => {\n    const [suggestions, setSuggestions] = useState({});\n    const [showSuggestions, setShowSuggestions] = useState({});\n\n    // Fetch AI suggestions based on job title\n    const getSuggestions = async (title, index) => {\n        if (!title) return;\n\n        try {\n            const response = await fetch('/api/generate-description', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ title }), // Send the job title to the backend\n            });\n\n            if (response.ok) {\n                const data = await response.json();\n\n                // Assuming data.suggestions[0] contains all descriptions as a single string\n                const splitSuggestions = data.suggestions[0]\n                    .split(/(\\d\\.\\s)/)  // Split on numbers like \"1. \", \"2. \", \"3. \"\n                    .filter(text => text.trim() && !/^\\d\\.\\s/.test(text));  // Remove empty elements and numbers\n\n                const newSuggestions = { ...suggestions, [index]: splitSuggestions };\n                setSuggestions(newSuggestions);\n\n                // Show suggestions for the relevant experience index\n                const updatedShowSuggestions = { ...showSuggestions, [index]: true };\n                setShowSuggestions(updatedShowSuggestions);\n\n            } else {\n                console.error('Error fetching suggestions');\n            }\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    // Update string for start and end dates\n    const updateDatesString = (exp) => {\n        const startDate = exp.startDate ? new Date(exp.startDate).toLocaleDateString('en-US', { year: 'numeric', month: 'short' }) : '';\n        const endDate = exp.currentlyWorking ? 'Present' : exp.endDate ? new Date(exp.endDate).toLocaleDateString('en-US', { year: 'numeric', month: 'short' }) : '';\n        return startDate && endDate ? `${startDate} - ${endDate}` : startDate;\n    };\n\n    return (\n        <div className='step'>\n            <h2>Work Experience</h2>\n            {userObject.experience.map((exp, index) => (\n                <div key={index} className='experience-input-group'>\n                    {/* Job Title Input: Fetch AI Suggestions on change */}\n                    <InputItem\n                        className='title'\n                        onChange={(e) => {\n                            handleExperienceChange(index, 'title', e.target.value);\n                            getSuggestions(e.target.value, index); // Fetch suggestions on title change\n                        }}\n                        label='Title'\n                        placeholder='Enter your job title'\n                        name={`title-${index}`}\n                        value={exp.title || ''}\n                    />\n\n                    {/* Company Name Input */}\n                    <InputItem\n                        className='company'\n                        onChange={(e) => handleExperienceChange(index, 'company', e.target.value)}\n                        label='Company'\n                        placeholder='Enter company name'\n                        name={`company-${index}`}\n                        value={exp.company}\n                    />\n\n                    {/* Start Date Picker */}\n                    <div className=\"experience-date\">\n                        <DatePicker\n                            selected={exp.startDate}\n                            onChange={(date) => handleExperienceChange(index, 'startDate', date)}\n                            dateFormat=\"MM/yyyy\"\n                            showMonthYearPicker\n                            placeholderText='Select start date'\n                            name={`startDate-${index}`}\n                        />\n                    </div>\n\n                    {/* End Date Picker */}\n                    <div className=\"experience-date\">\n                        <DatePicker\n                            selected={exp.endDate}\n                            onChange={(date) => handleExperienceChange(index, 'endDate', date)}\n                            dateFormat=\"MM/yyyy\"\n                            showMonthYearPicker\n                            placeholderText='Select end date'\n                            name={`endDate-${index}`}\n                            disabled={exp.currentlyWorking}\n                        />\n                    </div>\n\n                    {/* Currently Working Checkbox */}\n                    <div className=\"currently-working\">\n                        <input\n                            type=\"checkbox\"\n                            checked={exp.currentlyWorking}\n                            onChange={(e) => handleExperienceChange(index, 'currentlyWorking', e.target.checked)}\n                            id={`currentlyWorking-${index}`}\n                        />\n                        <label htmlFor={`currentlyWorking-${index}`} style={{ display: 'inline-block', marginLeft: '8px' }}>\n                            Currently Working\n                        </label>\n                    </div>\n\n                    {/* Location Input */}\n                    <InputItem\n                        className='location'\n                        onChange={(e) => handleExperienceChange(index, 'location', e.target.value)}\n                        label='Location'\n                        placeholder='Enter location'\n                        name={`location-${index}`}\n                        value={exp.location}\n                    />\n\n                    {/* Descriptions Input */}\n                    {exp.description.map((desc, descIndex) => (\n                        <div key={descIndex} className='description-item'>\n                            <InputItem\n                                className='description'\n                                onChange={(e) => handleDescriptionChange(index, descIndex, e.target.value)}\n                                label={`Description ${descIndex + 1}`}\n                                placeholder='Enter job description'\n                                name={`description-${index}-${descIndex}`}\n                                value={desc}\n                            />\n                            <button type='button' className='rbutton' onClick={() => removeDescription(index, descIndex)}>Remove Description</button>\n                        </div>\n                    ))}\n\n                    {/* Show/Hide AI Suggestions */}\n                    {showSuggestions[index] ? (\n                        <div className='suggestions-box'>\n                            <button type=\"button\" className=\"close-button\" onClick={() => setShowSuggestions({ ...showSuggestions, [index]: false })}>X</button>\n                            <h4>Suggested Descriptions:</h4>\n                            {suggestions[index].map((suggestion, i) => (\n                                <p key={i}>{suggestion.trim()}</p>\n                            ))}\n                            {/* Refresh Suggestions */}\n                            <button type='button' onClick={() => getSuggestions(exp.title, index)}>Refresh Suggestions</button>\n                        </div>\n                    ) : (\n                        <button type='button' onClick={() => setShowSuggestions({ ...showSuggestions, [index]: true })}>\n                            Show Suggestions\n                        </button>\n                    )}\n\n                    {/* Add/Remove Experience Buttons */}\n                    <div className=\"button-group\">\n                        <button type='button' className='add-description' onClick={() => addDescription(index)}>Add Description</button>\n                        <button type='button' className='rbutton' onClick={() => removeExperience(index)}>Remove Experience</button>\n                        <h3>{exp.company} <span>{updateDatesString(exp)}</span></h3>\n                    </div>\n                </div>\n            ))}\n\n            {/* Add New Experience Button */}\n            <div className=\"nav-buttons\">\n                <button type='button' className=\"add-experience\" onClick={addExperience}>Add Experience</button>\n            </div>\n        </div>\n    );\n};\n\nexport default Step2;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}