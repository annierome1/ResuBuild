{"ast":null,"code":"var _jsxFileName = \"/Users/annierome/Documents/GitHub/ResuBuild/resubuild/resume-builder/src/components/Experience.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport InputItem from './inputitems';\nimport \"./experience.css\";\n\n// Function to fetch job description suggestions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Step2 = ({\n  userObject,\n  handleExperienceChange,\n  handleDescriptionChange,\n  addExperience,\n  addDescription,\n  removeDescription,\n  removeExperience\n}) => {\n  _s();\n  const [suggestions, setSuggestions] = useState({});\n  const [showSuggestions, setShowSuggestions] = useState({});\n\n  // Function to fetch job description suggestions\n  const getSuggestions = async (title, index) => {\n    if (!title) return;\n    try {\n      const response = await fetch('http://localhost:5001/api/generate-description', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          title\n        }) // Send the job title to the backend\n      });\n      if (response.ok) {\n        const data = await response.json();\n\n        // Assuming data.suggestions[0] contains all descriptions as a single string\n        const splitSuggestions = data.suggestions[0].split(/(\\d\\.\\s)/) // Split on numbers like \"1. \", \"2. \", \"3. \"\n        .filter(text => text.trim() && !/^\\d\\.\\s/.test(text)); // Remove empty elements and numbers\n\n        const newSuggestions = {\n          ...suggestions,\n          [index]: splitSuggestions\n        };\n        setSuggestions(newSuggestions);\n        const updatedShowSuggestions = {\n          ...showSuggestions,\n          [index]: true\n        };\n        setShowSuggestions(updatedShowSuggestions);\n      } else {\n        console.error('Error fetching suggestions');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  // Function to update the display string for dates\n  const updateDatesString = exp => {\n    const startDate = exp.startDate ? new Date(exp.startDate).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short'\n    }) : '';\n    const endDate = exp.currentlyWorking ? 'Present' : exp.endDate ? new Date(exp.endDate).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short'\n    }) : '';\n    return startDate && endDate ? `${startDate} - ${endDate}` : startDate;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Work Experience\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), userObject.experience.map((exp, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"experience-input-group\",\n      children: [/*#__PURE__*/_jsxDEV(InputItem, {\n        className: \"title\",\n        onChange: e => {\n          handleExperienceChange(index, 'title', e.target.value);\n          getSuggestions(e.target.value, index); // Fetch suggestions on title change\n        },\n        label: \"Title\",\n        placeholder: \"Enter your job title\",\n        name: `title-${index}`,\n        value: exp.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(InputItem, {\n        className: \"company\",\n        onChange: e => handleExperienceChange(index, 'company', e.target.value),\n        label: \"Company\",\n        placeholder: \"Enter company name\",\n        name: `company-${index}`,\n        value: exp.company\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"experience-date\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: `startDate-${index}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n          selected: exp.startDate,\n          onChange: date => handleExperienceChange(index, 'startDate', date),\n          dateFormat: \"MM/yyyy\",\n          showMonthYearPicker: true,\n          placeholderText: \"Select start date\",\n          name: `startDate-${index}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"experience-date\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: `endDate-${index}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n          selected: exp.endDate,\n          onChange: date => handleExperienceChange(index, 'endDate', date),\n          dateFormat: \"MM/yyyy\",\n          showMonthYearPicker: true,\n          placeholderText: \"Select end date\",\n          name: `endDate-${index}`,\n          disabled: exp.currentlyWorking\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"currently-working\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: exp.currentlyWorking,\n          onChange: e => handleExperienceChange(index, 'currentlyWorking', e.target.checked),\n          id: `currentlyWorking-${index}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: `currentlyWorking-${index}`,\n          style: {\n            index\n          },\n          children: \"Currently Working\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(InputItem, {\n        className: \"location\",\n        onChange: e => handleExperienceChange(index, 'location', e.target.value),\n        label: \"Location\",\n        placeholder: \"Enter location\",\n        name: `location-${index}`,\n        value: exp.location\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }, this), exp.description.map((desc, descIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"description-item\",\n        children: [/*#__PURE__*/_jsxDEV(InputItem, {\n          className: \"description\",\n          onChange: e => handleDescriptionChange(index, descIndex, e.target.value),\n          label: `Description ${descIndex + 1}`,\n          placeholder: \"Enter job description\",\n          name: `description-${index}-${descIndex}`,\n          value: desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"rbutton\",\n          onClick: () => removeDescription(index, descIndex),\n          children: \"Remove Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 29\n        }, this)]\n      }, descIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 25\n      }, this)), showSuggestions[index] ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"suggestions-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"close-button\",\n          onClick: () => setShowSuggestions({\n            ...showSuggestions,\n            [index]: false\n          }),\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Suggested Descriptions:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 29\n        }, this), suggestions[index].map((suggestion, i) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: suggestion.trim()\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 33\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => getSuggestions(exp.title, index),\n          children: \"Refresh Suggestions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => setShowSuggestions({\n          ...showSuggestions,\n          [index]: true\n        }),\n        children: \"Show Suggestions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"add-description\",\n          onClick: () => addDescription(index),\n          children: \"Add Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"rbutton\",\n          onClick: () => removeExperience(index),\n          children: \"Remove Experience\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [exp.company, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: updateDatesString(exp)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 43\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nav-buttons\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"add-experience\",\n        onClick: addExperience,\n        children: \"Add Experience\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n_s(Step2, \"IiZtPAYG9psAAwN4nHOAjV1JH0Q=\");\n_c = Step2;\nexport default Step2;\nvar _c;\n$RefreshReg$(_c, \"Step2\");","map":{"version":3,"names":["React","useState","DatePicker","InputItem","jsxDEV","_jsxDEV","Step2","userObject","handleExperienceChange","handleDescriptionChange","addExperience","addDescription","removeDescription","removeExperience","_s","suggestions","setSuggestions","showSuggestions","setShowSuggestions","getSuggestions","title","index","response","fetch","method","headers","body","JSON","stringify","ok","data","json","splitSuggestions","split","filter","text","trim","test","newSuggestions","updatedShowSuggestions","console","error","updateDatesString","exp","startDate","Date","toLocaleDateString","year","month","endDate","currentlyWorking","className","children","fileName","_jsxFileName","lineNumber","columnNumber","experience","map","onChange","e","target","value","label","placeholder","name","company","htmlFor","selected","date","dateFormat","showMonthYearPicker","placeholderText","disabled","type","checked","id","style","location","description","desc","descIndex","onClick","suggestion","i","_c","$RefreshReg$"],"sources":["/Users/annierome/Documents/GitHub/ResuBuild/resubuild/resume-builder/src/components/Experience.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport InputItem from './inputitems';\nimport \"./experience.css\";\n\n\n\n    // Function to fetch job description suggestions\n\nconst Step2 = ({ userObject, handleExperienceChange, handleDescriptionChange, addExperience, addDescription, removeDescription, removeExperience }) => {\n    const [suggestions, setSuggestions] = useState({});\n    const [showSuggestions, setShowSuggestions] = useState({}); \n\n    // Function to fetch job description suggestions\n    const getSuggestions = async (title, index) => {\n        if (!title) return;\n\n        try {\n            const response = await fetch('http://localhost:5001/api/generate-description', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ title }), // Send the job title to the backend\n            });\n\n            if (response.ok) {\n                const data = await response.json();\n                \n                // Assuming data.suggestions[0] contains all descriptions as a single string\n                const splitSuggestions = data.suggestions[0]\n                    .split(/(\\d\\.\\s)/)  // Split on numbers like \"1. \", \"2. \", \"3. \"\n                    .filter(text => text.trim() && !/^\\d\\.\\s/.test(text));  // Remove empty elements and numbers\n\n                const newSuggestions = { ...suggestions, [index]: splitSuggestions };\n                setSuggestions(newSuggestions);\n\n                const updatedShowSuggestions = { ...showSuggestions, [index]: true };\n                setShowSuggestions(updatedShowSuggestions);\n\n            } else {\n                console.error('Error fetching suggestions');\n            }\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    // Function to update the display string for dates\n    const updateDatesString = (exp) => {\n        const startDate = exp.startDate ? new Date(exp.startDate).toLocaleDateString('en-US', { year: 'numeric', month: 'short' }) : '';\n        const endDate = exp.currentlyWorking ? 'Present' : exp.endDate ? new Date(exp.endDate).toLocaleDateString('en-US', { year: 'numeric', month: 'short' }) : '';\n        return startDate && endDate ? `${startDate} - ${endDate}` : startDate;\n    };\n\n    return (\n        <div className='step'>\n            <h2>Work Experience</h2>\n            {userObject.experience.map((exp, index) => (\n                <div key={index} className='experience-input-group'>\n                    {/* Title Input: Fetches suggestions on change */}\n                    <InputItem\n                        className='title'\n                        onChange={(e) => {\n                            handleExperienceChange(index, 'title', e.target.value);\n                            getSuggestions(e.target.value, index); // Fetch suggestions on title change\n                        }}\n                        label='Title'\n                        placeholder='Enter your job title'\n                        name={`title-${index}`}\n                        value={exp.title}\n                    />\n                    \n                    {/* Company Input */}\n                    <InputItem\n                        className='company'\n                        onChange={(e) => handleExperienceChange(index, 'company', e.target.value)}\n                        label='Company'\n                        placeholder='Enter company name'\n                        name={`company-${index}`}\n                        value={exp.company}\n                    />\n\n                    {/* Start Date Picker */}\n                    <div className=\"experience-date\">\n                        <label htmlFor={`startDate-${index}`}></label>\n                        <DatePicker\n                            selected={exp.startDate}\n                            onChange={(date) => handleExperienceChange(index, 'startDate', date)}\n                            dateFormat=\"MM/yyyy\"\n                            showMonthYearPicker\n                            placeholderText='Select start date'\n                            name={`startDate-${index}`}\n                        />\n                    </div>\n\n                    {/* End Date Picker */}\n                    <div className=\"experience-date\">\n                        <label htmlFor={`endDate-${index}`}></label>\n                        <DatePicker\n                            selected={exp.endDate}\n                            onChange={(date) => handleExperienceChange(index, 'endDate', date)}\n                            dateFormat=\"MM/yyyy\"\n                            showMonthYearPicker\n                            placeholderText='Select end date'\n                            name={`endDate-${index}`}\n                            disabled={exp.currentlyWorking}\n                        />\n                    </div>\n\n                    {/* Currently Working Checkbox */}\n                    <div className=\"currently-working\">\n                        <input\n                            type=\"checkbox\"\n                            checked={exp.currentlyWorking}\n                            onChange={(e) => handleExperienceChange(index, 'currentlyWorking', e.target.checked)}\n                            id={`currentlyWorking-${index}`}\n                        />\n                        <label htmlFor={`currentlyWorking-${index}`} style={{ index }}>Currently Working</label>\n                    </div>\n\n\n                    {/* Location Input */}\n                    <InputItem\n                        className='location'\n                        onChange={(e) => handleExperienceChange(index, 'location', e.target.value)}\n                        label='Location'\n                        placeholder='Enter location'\n                        name={`location-${index}`}\n                        value={exp.location}\n                    />\n\n                    {/* Job Descriptions List */}\n                    {exp.description.map((desc, descIndex) => (\n                        <div key={descIndex} className='description-item'>\n                            <InputItem\n                                className='description'\n                                onChange={(e) => handleDescriptionChange(index, descIndex, e.target.value)}\n                                label={`Description ${descIndex + 1}`}\n                                placeholder='Enter job description'\n                                name={`description-${index}-${descIndex}`}\n                                value={desc}\n                            />\n                            <button type='button' className='rbutton' onClick={() => removeDescription(index, descIndex)}>Remove Description</button>\n                        </div>\n                    ))}\n\n                    {/* Display AI Suggestions */}\n                    {showSuggestions[index] ? (\n                        <div className='suggestions-box'>\n                            <button type=\"button\" className=\"close-button\" onClick={() => setShowSuggestions({ ...showSuggestions, [index]: false })}>X</button>\n                            <h4>Suggested Descriptions:</h4>\n                            {suggestions[index].map((suggestion, i) => (\n                                <p key={i}>{suggestion.trim()}</p>\n                            ))}\n                            {/* Refresh button to get new suggestions */}\n                            <button type='button' onClick={() => getSuggestions(exp.title, index)}>Refresh Suggestions</button>\n                        </div>\n                    ) : (\n                        <button type='button' onClick={() => setShowSuggestions({ ...showSuggestions, [index]: true })}>\n                            Show Suggestions\n                        </button>\n                    )}\n\n                    {/* Buttons to Add or Remove Experience */}\n                    <div className=\"button-group\">\n                        <button type='button' className='add-description' onClick={() => addDescription(index)}>Add Description</button>\n                        <button type='button' className='rbutton' onClick={() => removeExperience(index)}>Remove Experience</button>\n                        <h3>{exp.company} <span>{updateDatesString(exp)}</span></h3>\n                    </div>\n                </div>\n            ))}\n\n            {/* Add New Experience Button */}\n            <div className=\"nav-buttons\">\n                <button type='button' className=\"add-experience\" onClick={addExperience}>Add Experience</button>\n            </div>\n        </div>\n    );\n};\n\n\nexport default Step2;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}